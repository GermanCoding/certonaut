syntax = "proto3";
package astrolink;

// Configuration contains all global, persistent settings for the Orbiter
message Configuration {
  bool has_configuration = 1;
}

// CertificateAuthority describes static information about a certificate authority (CA)
message CertificateAuthority {
  // Unique identifier for this CA
  string id = 1;
  // User-friendly name of the CA
  string name = 2;
  // The ACME directory URL of the CA. If the CA has multiple directory URLs, each URL is a separate CA
  string acme_url = 3;
  // True, if the CA is public. A public CA is one that is open to the public,
  // and performs DV from the worldwide internet
  bool is_public = 4;
  // True, if this CA is the default for new certificates.
  bool is_default = 5;
  // True, if this CA issues only test-use certificates that should not be used in production.
  bool is_testing = 6;
  // Various server-provided metadata about this CA
  Metadata metadata = 7;
}

message ListCertificateAuthorityResponse {
  repeated CertificateAuthority certificate_authorities = 1;
}

message ListAccountRequest {
  // The identifier of the CA for which to list accounts
  string ca_id = 1;
}

message ListAccountResponse {
  repeated Account accounts = 1;
}

// Account is an ACME account object
message Account {
  // Unique identifier for this account
  string id = 1;
  // User-friendly name of this account
  string name = 2;
}

// ACME directory metadata
message Metadata {
  // The terms of service that the CA might want the user to agree to
  optional string terms_of_service = 1;
  // A website to get familiar with the CA
  optional string website = 2;
  // CAA identifiers this CA accepts for issuance
  repeated string caa_identities = 3;
  // If true, this CA requires an external account to be setup before creating an ACME account
  bool external_account_required = 4;
}

// Request to create a new account at the specified CA
message NewAccountRequest {
  // The name of the new account
  string name = 1;
  // The ID of the CA at which to create the new account.
  string ca_id = 2;
  // Contact information (generally a list of mailto: addresses) to send to the CA
  repeated string contacts = 3;
  // True, if the user has explicitly agreed to the CA's TOS. False if not. Unset if the CA did not provide terms of service
  optional bool terms_of_service_agreed = 4;
  // Request for a specific key type to be used in the freshly generated key
  optional string key_type = 5;
  // TODO: EAB
}

enum Keytype {
  KEYTYPE_UNSPECIFIED = 0;
  KEYTYPE_RSA_2048 = 1;
  KEYTYPE_RSA_3072 = 2;
  KEYTYPE_RSA_4096 = 3;
  KEYTYPE_ECDSA_P256 = 10;
  KEYTYPE_ECDSA_P384 = 11;
  // TODO: ed25519 keys
}